Description: 
    Durell caylent Project
    This template deploys the required compute resources like ASG,ALB,Target groups etc to deploy Webserver. 

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
        Default: "QA"

Resources:

    LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Allow http to our load balancer
            VpcId: 
              Fn::ImportValue: !Sub VPCId
            SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0
            - IpProtocol: tcp
              FromPort: 8080
              ToPort: 8080
              CidrIp: 0.0.0.0/0

    WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Http to host 
          VpcId:
            Fn::ImportValue: !Sub VPCId
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0
    
    WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        #   The j flag here makes sure that you overwrite any files with the same name
        Properties:
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              apt-get update -y
              apt-get install apache2 -y
              systemctl start apache2.service
              echo "<html><body><h1>Hello World!<h1></body></html>" > /var/www/html/index.html
          ImageId: ami-0851b76e8b1bce90b
          SecurityGroups:
          - Ref: WebServerSecGroup
          InstanceType: t2.micro
          BlockDeviceMappings:
          - DeviceName: "/dev/sda1"
            Ebs:
              VolumeSize: '10'

    WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckIntervalSeconds: 10
          HealthCheckPath: /
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 8
          HealthyThresholdCount: 2
          Port: 80
          Protocol: HTTP
          UnhealthyThresholdCount: 5
          VpcId: 
            Fn::ImportValue: !Sub 'VPCId'

    ## Autoscaling Group uses web applaunch config to understand the machine details and target group
    WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
            - Fn::ImportValue:
                !Sub 'PrivateSubnet1' 
            - Fn::ImportValue:
                !Sub 'PrivateSubnet2' 
            LaunchConfigurationName:
              Ref: WebAppLaunchConfig
            MinSize: '3'
            MaxSize: '5'
            TargetGroupARNs:
            - Ref: WebAppTargetGroup

    ## Load Balacer to push in traffic to the private servers
    WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Subnets:
            - Fn::ImportValue:
                !Sub 'PublicSubnet1' 
            - Fn::ImportValue:
                !Sub 'PublicSubnet2' 
            SecurityGroups:
            - Ref: LBSecGroup

    ## Create a Listener for the LoadBalancer for incoming requests
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
            - Type: forward
              TargetGroupArn:
                Ref: WebAppTargetGroup
            LoadBalancerArn:
              Ref: WebAppLB
            Port: 80
            Protocol: HTTP

    ## Create a rule and attach to Listner
    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
          Actions:
          - Type: forward
            TargetGroupArn: !Ref 'WebAppTargetGroup'
          Conditions:
          - Field: path-pattern
            Values: [/]
          ListenerArn: !Ref 'Listener'
          Priority: 1

Outputs: 
    WebAppLB: 
        Description: Load Balancer DNSName
        Value: !Join ["", ["http://", !GetAtt WebAppLB.DNSName]]
        Export:
          Name: !Sub ${EnvironmentName}-LBal-DNSName
        

